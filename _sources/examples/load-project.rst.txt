
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/load-project.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_load-project.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_load-project.py:


Load Project
------------

Load and visualize an OMF project file

.. GENERATED FROM PYTHON SOURCE LINES 7-11

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 3
    import pyvista as pv
    import omfvista








.. GENERATED FROM PYTHON SOURCE LINES 12-13

Load the project into an :class:`pyvista.MultiBlock` dataset

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default


    project = omfvista.load_project('../assets/test_file.omf')
    print(project)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MultiBlock (0x7f8b04b13e28)
      N Blocks:     9
      X Bounds:     443941.105, 447059.611
      Y Bounds:     491941.536, 495059.859
      Z Bounds:     2330.000, 3555.942





.. GENERATED FROM PYTHON SOURCE LINES 18-21

Once the data is loaded as a :class:`pyvista.MultiBlock` dataset from
``omfvista``, then that object can be directly used for interactive 3D
visualization from ``pyvista``:

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: default


    project.plot()





.. image:: /examples/images/sphx_glr_load-project_001.png
    :alt: load project
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(450605.70583080064, 498606.04540880054, 8048.318718998364),
     (445500.3579790001, 493500.697557, 2942.97086719778),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 26-29

Or an interactive scene can be created and manipulated to create a compelling
figure directly in a Jupyter notebook. First, grab the elements from the
project:

.. GENERATED FROM PYTHON SOURCE LINES 29-36

.. code-block:: default


    # Grab a few elements of interest and plot em up!
    vol = project['Block Model']
    assay = project['wolfpass_WP_assay']
    topo = project['Topography']
    dacite = project['Dacite']








.. GENERATED FROM PYTHON SOURCE LINES 37-45

.. code-block:: default


    assay.set_active_scalars('DENSITY')

    p = pv.Plotter()
    p.add_mesh(assay.tube(radius=3))
    p.add_mesh(topo, opacity=0.5)
    p.show()




.. image:: /examples/images/sphx_glr_load-project_002.png
    :alt: load project
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(450590.5515598323, 498590.8911378322, 8059.037822401073),
     (445500.3579790001, 493500.697557, 2968.84424156883),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 46-47

Then apply a filtering tool from ``pyvista`` to the volumetric data:

.. GENERATED FROM PYTHON SOURCE LINES 47-52

.. code-block:: default


    # Threshold the volumetric data
    thresh_vol = vol.threshold([1.09, 4.20])
    print(thresh_vol)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    UnstructuredGrid (0x7f8b0489a768)
      N Cells:      92525
      N Points:     107807
      X Bounds:     4.447e+05, 4.457e+05
      Y Bounds:     4.929e+05, 4.942e+05
      Z Bounds:     2.330e+03, 3.110e+03
      N Arrays:     1





.. GENERATED FROM PYTHON SOURCE LINES 53-54

Then you can put it all in one environment!

.. GENERATED FROM PYTHON SOURCE LINES 54-70

.. code-block:: default


    # Create a plotting window
    p = pv.Plotter()
    # Add the bounds axis
    p.show_bounds()
    p.add_bounding_box()

    # Add our datasets
    p.add_mesh(topo, opacity=0.5)
    p.add_mesh(dacite, color='orange', opacity=0.6,)
    p.add_mesh(thresh_vol, cmap='coolwarm', clim=vol.get_data_range())

    # Add the assay logs: use a tube filter that varius the radius by an attribute
    p.add_mesh(assay.tube(radius=3), cmap='viridis')

    p.show()



.. image:: /examples/images/sphx_glr_load-project_003.png
    :alt: load project
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(450605.73033793643, 498606.06594899646, 8048.341830134237),
     (445500.359375, 493500.69498606, 2942.97086719778),
     (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.277 seconds)


.. _sphx_glr_download_examples_load-project.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: load-project.py <load-project.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: load-project.ipynb <load-project.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
