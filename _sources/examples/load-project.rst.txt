
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/load-project.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_load-project.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_load-project.py:


Load Project
------------

Load and visualize an OMF project file

.. GENERATED FROM PYTHON SOURCE LINES 7-12

.. code-block:: Python

    # sphinx_gallery_thumbnail_number = 3
    import pyvista as pv

    import omfvista








.. GENERATED FROM PYTHON SOURCE LINES 13-14

Load the project into an :class:`pyvista.MultiBlock` dataset

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: Python


    project = omfvista.load_project("../assets/test_file.omf")
    print(project)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MultiBlock (0x7ffa3e420700)
      N Blocks:   9
      X Bounds:   4.439e+05, 4.471e+05
      Y Bounds:   4.919e+05, 4.951e+05
      Z Bounds:   2.330e+03, 3.556e+03




.. GENERATED FROM PYTHON SOURCE LINES 19-22

Once the data is loaded as a :class:`pyvista.MultiBlock` dataset from
``omfvista``, then that object can be directly used for interactive 3D
visualization from ``pyvista``:

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: Python


    project.plot()





.. image-sg:: /examples/images/sphx_glr_load-project_001.png
   :alt: load project
   :srcset: /examples/images/sphx_glr_load-project_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 27-30

Or an interactive scene can be created and manipulated to create a compelling
figure directly in a Jupyter notebook. First, grab the elements from the
project:

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: Python


    # Grab a few elements of interest and plot em up!
    vol = project["Block Model"]
    assay = project["wolfpass_WP_assay"]
    topo = project["Topography"]
    dacite = project["Dacite"]








.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: Python


    assay.set_active_scalars("DENSITY")

    p = pv.Plotter()
    p.add_mesh(assay.tube(radius=3))
    p.add_mesh(topo, opacity=0.5)
    p.show()




.. image-sg:: /examples/images/sphx_glr_load-project_002.png
   :alt: load project
   :srcset: /examples/images/sphx_glr_load-project_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 47-48

Then apply a filtering tool from ``pyvista`` to the volumetric data:

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: Python


    # Threshold the volumetric data
    thresh_vol = vol.threshold([1.09, 4.20])
    print(thresh_vol)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    UnstructuredGrid (0x7ffa3c0ccd00)
      N Cells:    92525
      N Points:   107807
      X Bounds:   4.447e+05, 4.457e+05
      Y Bounds:   4.929e+05, 4.942e+05
      Z Bounds:   2.330e+03, 3.110e+03
      N Arrays:   1




.. GENERATED FROM PYTHON SOURCE LINES 54-55

Then you can put it all in one environment!

.. GENERATED FROM PYTHON SOURCE LINES 55-75

.. code-block:: Python


    # Create a plotting window
    p = pv.Plotter()
    # Add the bounds axis
    p.show_bounds()
    p.add_bounding_box()

    # Add our datasets
    p.add_mesh(topo, opacity=0.5)
    p.add_mesh(
        dacite,
        color="orange",
        opacity=0.6,
    )
    p.add_mesh(thresh_vol, cmap="coolwarm", clim=vol.get_data_range())

    # Add the assay logs: use a tube filter that varius the radius by an attribute
    p.add_mesh(assay.tube(radius=3), cmap="viridis")

    p.show()



.. image-sg:: /examples/images/sphx_glr_load-project_003.png
   :alt: load project
   :srcset: /examples/images/sphx_glr_load-project_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 7.125 seconds)


.. _sphx_glr_download_examples_load-project.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: load-project.ipynb <load-project.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: load-project.py <load-project.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: load-project.zip <load-project.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
